Index: backend/ap-project/src/main/java/eu/bsinfo/group2/approject/web/v1/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/main/java/eu/bsinfo/group2/approject/web/v1/LoginController.java	(date 1618252578265)
+++ backend/ap-project/src/main/java/eu/bsinfo/group2/approject/web/v1/LoginController.java	(date 1618252578265)
@@ -0,0 +1,41 @@
+package eu.bsinfo.group2.approject.web.v1;
+
+import eu.bsinfo.group2.approject.entities.user.UserDbo;
+import eu.bsinfo.group2.approject.exception.UnauthorizedException;
+import eu.bsinfo.group2.approject.exception.UserNotFoundException;
+import eu.bsinfo.group2.approject.repository.UserRepository;
+import eu.bsinfo.group2.approject.util.LoginFormInput;
+import eu.bsinfo.group2.approject.util.PasswordService;
+import eu.bsinfo.group2.approject.web.v1.interfaces.LoginApi;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.util.Optional;
+
+@RestController
+public class LoginController extends BaseAbstractController implements LoginApi {
+
+    private final PasswordService passwordService;
+    private final UserRepository userRepository;
+
+    public LoginController(PasswordService passwordService, UserRepository userRepository) {
+        this.passwordService = passwordService;
+        this.userRepository = userRepository;
+    }
+
+
+    @Override
+    public UserDbo authenticateUser(LoginFormInput loginInfo) throws UnauthorizedException, UserNotFoundException {
+        Optional<UserDbo> user = userRepository.findByUsername(loginInfo.getUsername());
+        if (user.isEmpty()) {
+            throw new UserNotFoundException();
+        }
+        UserDbo userDbo = user.get();
+        boolean isAuthenticated = passwordService.verifyPassword(loginInfo.getPassword(), userDbo.getPassword());
+
+        if (isAuthenticated) {
+            return userDbo;
+        } else {
+            throw new UnauthorizedException();
+        }
+    }
+}
Index: backend/ap-project/src/integration/java/eu/bsinfo/group2/approject/web/v1/LoginControllerIT.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/integration/java/eu/bsinfo/group2/approject/web/v1/LoginControllerIT.java	(date 1618252578264)
+++ backend/ap-project/src/integration/java/eu/bsinfo/group2/approject/web/v1/LoginControllerIT.java	(date 1618252578264)
@@ -0,0 +1,144 @@
+package eu.bsinfo.group2.approject.web.v1;
+
+import eu.bsinfo.group2.approject.ApProjectApplication;
+import eu.bsinfo.group2.approject.entities.user.UserDbo;
+import eu.bsinfo.group2.approject.exception.UnauthorizedException;
+import eu.bsinfo.group2.approject.exception.UserAlreadyExistsException;
+import eu.bsinfo.group2.approject.exception.UserNotFoundException;
+import eu.bsinfo.group2.approject.repository.UserRepository;
+import eu.bsinfo.group2.approject.util.PasswordService;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.junit.jupiter.api.Tag;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.mock.mockito.SpyBean;
+import org.springframework.boot.test.web.client.TestRestTemplate;
+import org.springframework.http.*;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.context.ActiveProfiles;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.verify;
+
+@Tag("IntegrationTest")
+@SpringBootTest(
+        classes = {ApProjectApplication.class},
+        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+@ActiveProfiles("integration")
+public class LoginControllerIT {
+
+    @SpyBean
+    private LoginController loginController;
+
+    @Autowired
+    private TestRestTemplate restTemplate;
+
+    @Autowired
+    private PasswordService passwordService;
+
+    @Autowired
+    private UserRepository userRepository;
+
+    /**
+     * Helper function.
+     *
+     * @return JSON Request Body of a userDbo
+     */
+    private JSONObject generateRequestBody() throws JSONException {
+        final JSONObject requestBody = new JSONObject();
+        requestBody.put("username", "testuser");
+        requestBody.put("password", "testpassword");
+        return requestBody;
+    }
+
+
+    /**
+     * End-to-End Test if user is correctly authenticated.
+     */
+    @Test
+    @DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)
+    public void shouldAuthenticateUser() throws JSONException, UserAlreadyExistsException, UnauthorizedException, UserNotFoundException {
+        UserDbo user = new UserDbo();
+        user.setUsername("testuser");
+        user.setPassword(passwordService.encodePassword("testpassword"));
+        userRepository.save(user);
+
+        // Request Setup
+        JSONObject requestBody = generateRequestBody();
+        final HttpHeaders headers = new HttpHeaders();
+        headers.add("Content-Type", "application/json;charset=UTF-8");
+        final HttpEntity<Object> requestEntity = new HttpEntity<>(requestBody.toString(), headers);
+
+        ResponseEntity<String> response =
+                restTemplate.exchange("/api/v1/login",
+                        HttpMethod.POST,
+                        requestEntity,
+                        String.class);
+
+        // Verify correct function in UserController is called.
+        verify(loginController).authenticateUser(any());
+
+        // Verify Request returns correct HTTP status code.
+        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
+    }
+
+    /**
+     * End-to-End Test if user is correctly not authenticated if password is wrong.
+     */
+    @Test
+    @DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)
+    public void shouldReturn401IfWrongPassword() throws JSONException, UserAlreadyExistsException, UnauthorizedException, UserNotFoundException {
+        UserDbo user = new UserDbo();
+        user.setUsername("testuser");
+        user.setPassword(passwordService.encodePassword("testPassword"));
+        userRepository.save(user);
+
+        // Request Setup
+        JSONObject requestBody = generateRequestBody();
+        final HttpHeaders headers = new HttpHeaders();
+        headers.add("Content-Type", "application/json;charset=UTF-8");
+        final HttpEntity<Object> requestEntity = new HttpEntity<>(requestBody.toString(), headers);
+
+        ResponseEntity<String> response =
+                restTemplate.exchange("/api/v1/login",
+                        HttpMethod.POST,
+                        requestEntity,
+                        String.class);
+
+        // Verify correct function in UserController is called.
+        verify(loginController).authenticateUser(any());
+
+        // Verify Request returns correct HTTP status code.
+        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
+    }
+
+    /**
+     * End-to-End Test if user is not found.
+     */
+    @Test
+    @DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)
+    public void shouldReturn404OnNonExistingUser() throws JSONException, UserAlreadyExistsException, UnauthorizedException, UserNotFoundException {
+        // Request Setup
+        JSONObject requestBody = generateRequestBody();
+        final HttpHeaders headers = new HttpHeaders();
+        headers.add("Content-Type", "application/json;charset=UTF-8");
+        final HttpEntity<Object> requestEntity = new HttpEntity<>(requestBody.toString(), headers);
+
+        ResponseEntity<String> response =
+                restTemplate.exchange("/api/v1/login",
+                        HttpMethod.POST,
+                        requestEntity,
+                        String.class);
+
+        // Verify correct function in UserController is called.
+        verify(loginController).authenticateUser(any());
+
+        // Verify Request returns correct HTTP status code.
+        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
+    }
+
+}
+
Index: backend/ap-project/src/main/java/eu/bsinfo/group2/approject/web/v1/interfaces/LoginApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/main/java/eu/bsinfo/group2/approject/web/v1/interfaces/LoginApi.java	(date 1618252578267)
+++ backend/ap-project/src/main/java/eu/bsinfo/group2/approject/web/v1/interfaces/LoginApi.java	(date 1618252578267)
@@ -0,0 +1,20 @@
+package eu.bsinfo.group2.approject.web.v1.interfaces;
+
+import eu.bsinfo.group2.approject.entities.user.UserDbo;
+import eu.bsinfo.group2.approject.exception.UnauthorizedException;
+import eu.bsinfo.group2.approject.exception.UserNotFoundException;
+import eu.bsinfo.group2.approject.util.LoginFormInput;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+
+public interface LoginApi {
+    /**
+     * Validates user credentials.
+     *
+     * @param loginInfo Username and Password in JSON Format
+     * @return UserDBO if Authorization is successful.
+     * @throws UnauthorizedException if Authorization is unsuccessful.
+     */
+    @PostMapping(value = "/api/v1/login")
+    UserDbo authenticateUser(@RequestBody LoginFormInput loginInfo) throws UnauthorizedException, UserNotFoundException;
+}
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1618247557448)
+++ .idea/compiler.xml	(date 1618247557448)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="true" />
+      <profile name="Gradle Imported" enabled="true">
+        <outputRelativeToContentRoot value="true" />
+        <processorPath useClasspath="false">
+          <entry name="$USER_HOME$/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.18/481f5bfed3ae29f656eedfe9e98c8365b8ba5c57/lombok-1.18.18.jar" />
+        </processorPath>
+        <module name="ap-project.main" />
+      </profile>
+    </annotationProcessing>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/encodings.xml	(date 1615287397773)
+++ .idea/encodings.xml	(date 1615287397773)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding" addBOMForNewFiles="with NO BOM" />
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.gitignore	(date 1615287494653)
+++ .idea/.gitignore	(date 1615287494653)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
+# Editor-based HTTP Client requests
+/httpRequests/
Index: backend/ap-project/src/main/java/eu/bsinfo/group2/approject/util/LoginFormInput.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/main/java/eu/bsinfo/group2/approject/util/LoginFormInput.java	(date 1618252578266)
+++ backend/ap-project/src/main/java/eu/bsinfo/group2/approject/util/LoginFormInput.java	(date 1618252578266)
@@ -0,0 +1,11 @@
+package eu.bsinfo.group2.approject.util;
+
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+public class LoginFormInput {
+    private String username;
+    private String password;
+}
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/jarRepositories.xml	(date 1615287502529)
+++ .idea/jarRepositories.xml	(date 1615287502529)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="MavenRepo" />
+      <option name="name" value="MavenRepo" />
+      <option name="url" value="https://repo.maven.apache.org/maven2/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1615287429773)
+++ .idea/modules.xml	(date 1615287429773)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/bsinfo-ap-project.iml" filepath="$PROJECT_DIR$/.idea/bsinfo-ap-project.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1615287429769)
+++ .idea/vcs.xml	(date 1615287429769)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(date 1617687074535)
+++ .idea/gradle.xml	(date 1617687074535)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$/backend/ap-project" />
+        <option name="gradleJvm" value="11" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$/backend/ap-project" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1615287836202)
+++ .idea/misc.xml	(date 1615287836202)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="FrameworkDetectionExcludesConfiguration">
+    <file type="web" url="file://$PROJECT_DIR$/backend/ap-project" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="11" project-jdk-type="JavaSDK" />
+</project>
\ No newline at end of file
Index: .idea/bsinfo-ap-project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/bsinfo-ap-project.iml	(date 1615287482718)
+++ .idea/bsinfo-ap-project.iml	(date 1615287482718)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/backend/ap-project/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
