Index: backend/ap-project/src/main/java/eu/bsinfo/group2/approject/service/ContactService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eu.bsinfo.group2.approject.service;public class ContactService {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/main/java/eu/bsinfo/group2/approject/service/ContactService.java	(revision 9c01b73a0209066c3974d333e4abec273c3419fb)
+++ backend/ap-project/src/main/java/eu/bsinfo/group2/approject/service/ContactService.java	(date 1618446675203)
@@ -1,2 +1,10 @@
-package eu.bsinfo.group2.approject.service;public class ContactService {
+package eu.bsinfo.group2.approject.service;
+
+import eu.bsinfo.group2.approject.entities.user.ContactSet;
+import eu.bsinfo.group2.approject.entities.user.UserDbo;
+
+import java.util.Set;
+
+public interface ContactService {
+    Set<ContactSet> setContactData(UserDbo user, Set<ContactSet> contactInformation);
 }
Index: backend/ap-project/src/main/java/eu/bsinfo/group2/approject/service/ContactServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eu.bsinfo.group2.approject.service;public class ContactServiceImpl {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/main/java/eu/bsinfo/group2/approject/service/ContactServiceImpl.java	(revision 9c01b73a0209066c3974d333e4abec273c3419fb)
+++ backend/ap-project/src/main/java/eu/bsinfo/group2/approject/service/ContactServiceImpl.java	(date 1618446675244)
@@ -1,2 +1,25 @@
-package eu.bsinfo.group2.approject.service;public class ContactServiceImpl {
+package eu.bsinfo.group2.approject.service;
+
+import eu.bsinfo.group2.approject.entities.user.ContactSet;
+import eu.bsinfo.group2.approject.entities.user.UserDbo;
+import eu.bsinfo.group2.approject.repository.UserRepository;
+import org.springframework.stereotype.Service;
+
+import java.util.Optional;
+import java.util.Set;
+
+@Service
+public class ContactServiceImpl implements ContactService {
+
+    private final UserRepository userRepository;
+
+    public ContactServiceImpl(UserRepository userRepository) {
+        this.userRepository = userRepository;
+    }
+
+    @Override
+    public Set<ContactSet> setContactData(UserDbo user, Set<ContactSet> contactInformation) {
+        Optional<UserDbo> username = userRepository.findByUsername(user.getUsername());
+        return userRepository.saveContactData(username, contactInformation);
+    }
 }
Index: backend/ap-project/src/integration/java/eu/bsinfo/group2/approject/web/v1/LoginControllerIT.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eu.bsinfo.group2.approject.web.v1;\n\nimport eu.bsinfo.group2.approject.ApProjectApplication;\nimport eu.bsinfo.group2.approject.entities.user.UserDbo;\nimport eu.bsinfo.group2.approject.exception.UnauthorizedException;\nimport eu.bsinfo.group2.approject.exception.UserAlreadyExistsException;\nimport eu.bsinfo.group2.approject.exception.UserNotFoundException;\nimport eu.bsinfo.group2.approject.repository.UserRepository;\nimport eu.bsinfo.group2.approject.util.PasswordService;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.SpyBean;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.http.*;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ActiveProfiles;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.verify;\n\n@Tag(\"IntegrationTest\")\n@SpringBootTest(\n        classes = {ApProjectApplication.class},\n        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@ActiveProfiles(\"integration\")\npublic class LoginControllerIT {\n\n    @SpyBean\n    private LoginController loginController;\n\n    @Autowired\n    private TestRestTemplate restTemplate;\n\n    @Autowired\n    private PasswordService passwordService;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    /**\n     * Helper function.\n     *\n     * @return JSON Request Body of a userDbo\n     */\n    private JSONObject generateRequestBody() throws JSONException {\n        final JSONObject requestBody = new JSONObject();\n        requestBody.put(\"username\", \"testuser\");\n        requestBody.put(\"password\", \"testpassword\");\n        return requestBody;\n    }\n\n\n    /**\n     * End-to-End Test if user is correctly authenticated.\n     */\n    @Test\n    @DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n    public void shouldAuthenticateUser() throws JSONException, UserAlreadyExistsException, UnauthorizedException, UserNotFoundException {\n        UserDbo user = new UserDbo();\n        user.setUsername(\"testuser\");\n        user.setPassword(passwordService.encodePassword(\"testpassword\"));\n        userRepository.save(user);\n\n        // Request Setup\n        JSONObject requestBody = generateRequestBody();\n        final HttpHeaders headers = new HttpHeaders();\n        headers.add(\"Content-Type\", \"application/json;charset=UTF-8\");\n        final HttpEntity<Object> requestEntity = new HttpEntity<>(requestBody.toString(), headers);\n\n        ResponseEntity<String> response =\n                restTemplate.exchange(\"/api/v1/login\",\n                        HttpMethod.POST,\n                        requestEntity,\n                        String.class);\n\n        // Verify correct function in UserController is called.\n        verify(loginController).authenticateUser(any());\n\n        // Verify Request returns correct HTTP status code.\n        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n    }\n\n    /**\n     * End-to-End Test if user is correctly not authenticated if password is wrong.\n     */\n    @Test\n    @DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n    public void shouldReturn401IfWrongPassword() throws JSONException, UserAlreadyExistsException, UnauthorizedException, UserNotFoundException {\n        UserDbo user = new UserDbo();\n        user.setUsername(\"testuser\");\n        user.setPassword(passwordService.encodePassword(\"testPassword\"));\n        userRepository.save(user);\n\n        // Request Setup\n        JSONObject requestBody = generateRequestBody();\n        final HttpHeaders headers = new HttpHeaders();\n        headers.add(\"Content-Type\", \"application/json;charset=UTF-8\");\n        final HttpEntity<Object> requestEntity = new HttpEntity<>(requestBody.toString(), headers);\n\n        ResponseEntity<String> response =\n                restTemplate.exchange(\"/api/v1/login\",\n                        HttpMethod.POST,\n                        requestEntity,\n                        String.class);\n\n        // Verify correct function in UserController is called.\n        verify(loginController).authenticateUser(any());\n\n        // Verify Request returns correct HTTP status code.\n        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\n    }\n\n    /**\n     * End-to-End Test if user is not found.\n     */\n    @Test\n    @DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n    public void shouldReturn404OnNonExistingUser() throws JSONException, UserAlreadyExistsException, UnauthorizedException, UserNotFoundException {\n        // Request Setup\n        JSONObject requestBody = generateRequestBody();\n        final HttpHeaders headers = new HttpHeaders();\n        headers.add(\"Content-Type\", \"application/json;charset=UTF-8\");\n        final HttpEntity<Object> requestEntity = new HttpEntity<>(requestBody.toString(), headers);\n\n        ResponseEntity<String> response =\n                restTemplate.exchange(\"/api/v1/login\",\n                        HttpMethod.POST,\n                        requestEntity,\n                        String.class);\n\n        // Verify correct function in UserController is called.\n        verify(loginController).authenticateUser(any());\n\n        // Verify Request returns correct HTTP status code.\n        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);\n    }\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/integration/java/eu/bsinfo/group2/approject/web/v1/LoginControllerIT.java	(revision 9c01b73a0209066c3974d333e4abec273c3419fb)
+++ backend/ap-project/src/integration/java/eu/bsinfo/group2/approject/web/v1/LoginControllerIT.java	(date 1618448186899)
@@ -18,6 +18,7 @@
 import org.springframework.http.*;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.ContextConfiguration;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.any;
Index: backend/ap-project/src/main/java/eu/bsinfo/group2/approject/web/v1/ContactController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eu.bsinfo.group2.approject.web.v1;public class ContactController {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/main/java/eu/bsinfo/group2/approject/web/v1/ContactController.java	(revision 9c01b73a0209066c3974d333e4abec273c3419fb)
+++ backend/ap-project/src/main/java/eu/bsinfo/group2/approject/web/v1/ContactController.java	(date 1618447470268)
@@ -1,2 +1,31 @@
-package eu.bsinfo.group2.approject.web.v1;public class ContactController {
+package eu.bsinfo.group2.approject.web.v1;
+
+import eu.bsinfo.group2.approject.entities.user.ContactSet;
+import eu.bsinfo.group2.approject.entities.user.UserDbo;
+import eu.bsinfo.group2.approject.exception.UserNotFoundException;
+import eu.bsinfo.group2.approject.service.ContactService;
+import eu.bsinfo.group2.approject.service.UserService;
+import eu.bsinfo.group2.approject.web.v1.interfaces.ContactApi;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.util.Optional;
+import java.util.Set;
+
+@RestController
+public class ContactController extends BaseAbstractController implements ContactApi {
+
+    private final UserService userService;
+    private final ContactService contactService;
+
+    public ContactController (UserService userService, ContactService contactService) {
+        this.userService = userService;
+        this.contactService = contactService;
+    }
+
+    @Override
+    public Set<ContactSet> setContactData(String username, Set<ContactSet> contactInformation) throws UserNotFoundException {
+        Optional<UserDbo> user = userService.findUser(username);
+        if (user.isEmpty()) throw new UserNotFoundException();
+        return contactService.setContactData(user.get(), contactInformation);
+    }
 }
Index: backend/ap-project/src/main/java/eu/bsinfo/group2/approject/entities/user/UserDbo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eu.bsinfo.group2.approject.entities.user;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.hibernate.annotations.CreationTimestamp;\nimport org.hibernate.annotations.UpdateTimestamp;\n\nimport javax.persistence.*;\nimport java.util.Date;\n\n@Data\n@NoArgsConstructor\n@Entity\n@Table(name = \"user\")\npublic class UserDbo {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    private String username;\n\n    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\n    private String password;\n\n    private String firstName;\n\n    private String lastName;\n\n    private String emailAddress;\n\n    private UserType userType;\n\n    @CreationTimestamp\n    private Date generatedAt;\n\n    @UpdateTimestamp\n    private Date updatedAt;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/main/java/eu/bsinfo/group2/approject/entities/user/UserDbo.java	(revision 9c01b73a0209066c3974d333e4abec273c3419fb)
+++ backend/ap-project/src/main/java/eu/bsinfo/group2/approject/entities/user/UserDbo.java	(date 1618402953334)
@@ -8,6 +8,7 @@
 
 import javax.persistence.*;
 import java.util.Date;
+import java.util.Set;
 
 @Data
 @NoArgsConstructor
@@ -31,6 +32,9 @@
 
     private UserType userType;
 
+    @OneToMany
+    private Set<ContactSet> contactTypes;
+
     @CreationTimestamp
     private Date generatedAt;
 
Index: backend/ap-project/src/main/java/eu/bsinfo/group2/approject/entities/user/ContactSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eu.bsinfo.group2.approject.entities.user;public class ContactSet {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/main/java/eu/bsinfo/group2/approject/entities/user/ContactSet.java	(revision 9c01b73a0209066c3974d333e4abec273c3419fb)
+++ backend/ap-project/src/main/java/eu/bsinfo/group2/approject/entities/user/ContactSet.java	(date 1618402953342)
@@ -1,2 +1,12 @@
-package eu.bsinfo.group2.approject.entities.user;public class ContactSet {
+package eu.bsinfo.group2.approject.entities.user;
+
+import javax.persistence.Entity;
+
+@Entity
+public enum ContactSet {
+    EMAIL,
+    SKYPE,
+    TELEPHONE,
+    FAX,
+    ADDRESS,
 }
Index: backend/ap-project/src/main/java/eu/bsinfo/group2/approject/web/v1/interfaces/ContactApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eu.bsinfo.group2.approject.web.v1.interfaces;public interface ContactApi {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/main/java/eu/bsinfo/group2/approject/web/v1/interfaces/ContactApi.java	(revision 9c01b73a0209066c3974d333e4abec273c3419fb)
+++ backend/ap-project/src/main/java/eu/bsinfo/group2/approject/web/v1/interfaces/ContactApi.java	(date 1618447470276)
@@ -1,2 +1,23 @@
-package eu.bsinfo.group2.approject.web.v1.interfaces;public interface ContactApi {
+package eu.bsinfo.group2.approject.web.v1.interfaces;
+
+import eu.bsinfo.group2.approject.entities.user.ContactSet;
+import eu.bsinfo.group2.approject.exception.UserNotFoundException;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.util.Set;
+
+@RestController
+public interface ContactApi {
+
+    /**
+     * Adds contact information to an user
+     *
+     * @param username The username of the user to add contact-information
+     * @return a set of contact information.
+     */
+    @PostMapping(value = "/api/v1/user/contact/{username}")
+    Set<ContactSet> setContactData(@PathVariable("username") String username, @RequestBody Set<ContactSet> contactInformation) throws UserNotFoundException;
 }
Index: backend/ap-project/src/main/java/eu/bsinfo/group2/approject/entities/user/ContactTypes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eu.bsinfo.group2.approject.entities.user;\n\nimport lombok.NoArgsConstructor;\n\nimport javax.persistence.Entity;\n\n@Entity\n@NoArgsConstructor\npublic class ContactTypes {\n\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/main/java/eu/bsinfo/group2/approject/entities/user/ContactTypes.java	(revision 9c01b73a0209066c3974d333e4abec273c3419fb)
+++ backend/ap-project/src/main/java/eu/bsinfo/group2/approject/entities/user/ContactTypes.java	(date 1618403013257)
@@ -3,11 +3,22 @@
 import lombok.NoArgsConstructor;
 
 import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.OneToMany;
+import java.util.Set;
 
 @Entity
 @NoArgsConstructor
 public class ContactTypes {
 
+    @Id
+    private String id;
 
+    @OneToMany
+    Set<ContactSet> contactTypes;
+
+    ContactTypes(Set<ContactSet> contactTypes) {
+        this.contactTypes = contactTypes;
+    }
 }
 
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CompilerConfiguration\">\n    <annotationProcessing>\n      <profile default=\"true\" name=\"Default\" enabled=\"true\" />\n      <profile name=\"Gradle Imported\" enabled=\"true\">\n        <outputRelativeToContentRoot value=\"true\" />\n        <processorPath useClasspath=\"false\">\n          <entry name=\"$USER_HOME$/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.18/481f5bfed3ae29f656eedfe9e98c8365b8ba5c57/lombok-1.18.18.jar\" />\n        </processorPath>\n        <module name=\"ap-project.main\" />\n      </profile>\n    </annotationProcessing>\n  </component>\n</project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision 9c01b73a0209066c3974d333e4abec273c3419fb)
+++ .idea/compiler.xml	(date 1618483308767)
@@ -12,4 +12,4 @@
       </profile>
     </annotationProcessing>
   </component>
-</project>
+</project>
\ No newline at end of file
Index: backend/ap-project/src/main/java/eu/bsinfo/group2/approject/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package eu.bsinfo.group2.approject.repository;\n\nimport eu.bsinfo.group2.approject.entities.user.UserDbo;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n@Repository\npublic interface UserRepository extends JpaRepository<UserDbo, Long> {\n    Optional<UserDbo> findById(Long id);\n\n    Optional<UserDbo> findByUsername(String username);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/ap-project/src/main/java/eu/bsinfo/group2/approject/repository/UserRepository.java	(revision 9c01b73a0209066c3974d333e4abec273c3419fb)
+++ backend/ap-project/src/main/java/eu/bsinfo/group2/approject/repository/UserRepository.java	(date 1618446675161)
@@ -1,14 +1,17 @@
 package eu.bsinfo.group2.approject.repository;
 
+import eu.bsinfo.group2.approject.entities.user.ContactSet;
 import eu.bsinfo.group2.approject.entities.user.UserDbo;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 
 import java.util.Optional;
+import java.util.Set;
 
 @Repository
 public interface UserRepository extends JpaRepository<UserDbo, Long> {
     Optional<UserDbo> findById(Long id);
 
     Optional<UserDbo> findByUsername(String username);
+    Set<ContactSet> saveContactData(Optional<UserDbo> userDbo, Set<ContactSet> contactInformation);
 }
